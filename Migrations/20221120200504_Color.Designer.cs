// <auto-generated />
using System;
using CinemaDB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CinemaDB.Migrations
{
    [DbContext(typeof(CinemaDbContext))]
    [Migration("20221120200504_Color")]
    partial class Color
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Cyrillic_General_CI_AS")
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CinemaDB.Models.Cinema", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdminPhone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("C_Address");

                    b.Property<string>("CName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("C_Name");

                    b.Property<short?>("Clients")
                        .HasColumnType("smallint");

                    b.Property<short?>("Color")
                        .HasColumnType("smallint");

                    b.Property<byte>("Halls")
                        .HasColumnType("tinyint");

                    b.Property<short>("WorkersCount")
                        .HasColumnType("smallint");

                    b.HasKey("Id")
                        .HasName("PK__Cinema__3214EC270D38311B");

                    b.HasIndex(new[] { "CName" }, "UQ__Cinema__3006C736899E30D3")
                        .IsUnique();

                    b.HasIndex(new[] { "AdminPhone" }, "UQ__Cinema__3FFAEA4968434566")
                        .IsUnique()
                        .HasFilter("[AdminPhone] IS NOT NULL");

                    b.HasIndex(new[] { "CAddress" }, "UQ__Cinema__497DFDFCE1DEF5FE")
                        .IsUnique();

                    b.ToTable("Cinema", null, t =>
                        {
                            t.HasCheckConstraint("WorkersCount", "WorkersCount>0");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdminPhone = "(096) 352-69-23",
                            CAddress = "вул. Ринкова",
                            CName = "Байрактар",
                            Clients = (short)-666,
                            Halls = (byte)6,
                            WorkersCount = (short)31
                        },
                        new
                        {
                            Id = 2,
                            AdminPhone = "(067) 783-11-22",
                            CAddress = "вул. Лагерна, 4/1",
                            CName = "Бескінечне літо",
                            Clients = (short)410,
                            Halls = (byte)4,
                            WorkersCount = (short)25
                        });
                });

            modelBuilder.Entity("CinemaDB.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("C_Name")
                        .HasDefaultValueSql("('NONAME')");

                    b.Property<string>("CSurname")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("C_Surname")
                        .HasDefaultValueSql("('NONAME')");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id")
                        .HasName("PK__Clients__3214EC27FF254FBD");

                    b.HasIndex(new[] { "Phone" }, "UQ__Clients__5C7E359EC9B3A9C9")
                        .IsUnique();

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("CinemaDB.Models.Film", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AgeRate")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasDefaultValueSql("('NOT FOUND')");

                    b.Property<string>("Company")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasDefaultValueSql("('NOT FOUND')");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("F_Name");

                    b.Property<TimeSpan?>("FTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("time")
                        .HasColumnName("F_Time")
                        .HasDefaultValueSql("('00:00')");

                    b.Property<string>("Genre")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValueSql("('NOT FOUND')");

                    b.Property<decimal?>("Stars")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(4, 2)")
                        .HasDefaultValueSql("((0.0))");

                    b.HasKey("Id")
                        .HasName("PK__Films__3214EC274FDFF09F");

                    b.HasIndex(new[] { "FName" }, "UQ__Films__423F2C5B1820F14D")
                        .IsUnique();

                    b.ToTable("Films");
                });

            modelBuilder.Entity("CinemaDB.Models.Hall", b =>
                {
                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<byte>("HColumns")
                        .HasColumnType("tinyint")
                        .HasColumnName("H_Columns");

                    b.Property<byte>("HSeats")
                        .HasColumnType("tinyint")
                        .HasColumnName("H_Seats");

                    b.Property<string>("SeatsType")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValueSql("('Default')");

                    b.Property<string>("Technology")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValueSql("('Absent')");

                    b.HasKey("Number")
                        .HasName("PK__Halls__78A1A19C29B53E9D");

                    b.ToTable("Halls");
                });

            modelBuilder.Entity("CinemaDB.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("Client_ID");

                    b.Property<DateTime?>("ODate")
                        .HasColumnType("datetime")
                        .HasColumnName("O_Date");

                    b.Property<byte>("Tickets")
                        .HasColumnType("tinyint");

                    b.Property<int?>("WorkerId")
                        .HasColumnType("int")
                        .HasColumnName("Worker_ID");

                    b.HasKey("Id")
                        .HasName("PK__Orders__3214EC27C4EE9770");

                    b.HasIndex("ClientId");

                    b.HasIndex("WorkerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("CinemaDB.Models.Position", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("PName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("P_Name");

                    b.HasKey("Id")
                        .HasName("PK__Position__3214EC274BF3B25B");

                    b.HasIndex(new[] { "PName" }, "UQ__Position__9634B4F2C64A5220")
                        .IsUnique();

                    b.ToTable("Positions");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            PName = "Системний адміністратор"
                        },
                        new
                        {
                            Id = 1,
                            PName = "Керуючий кінотетру"
                        },
                        new
                        {
                            Id = 3,
                            PName = "Бармен"
                        });
                });

            modelBuilder.Entity("CinemaDB.Models.Seance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("FilmId")
                        .HasColumnType("int")
                        .HasColumnName("Film_ID");

                    b.Property<int?>("HallNum")
                        .HasColumnType("int")
                        .HasColumnName("Hall_Num");

                    b.Property<short>("Price")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("SDate")
                        .HasColumnType("datetime")
                        .HasColumnName("S_Date");

                    b.Property<string>("TypeOf3D")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id")
                        .HasName("PK__Seances__3214EC27D3270BA1");

                    b.HasIndex("FilmId");

                    b.HasIndex("HallNum");

                    b.ToTable("Seances");
                });

            modelBuilder.Entity("CinemaDB.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Booking")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValueSql("('No booking')");

                    b.Property<DateTime?>("DateOfPay")
                        .HasColumnType("datetime");

                    b.Property<byte>("NumOfSeat")
                        .HasColumnType("tinyint");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("Order_ID");

                    b.Property<int?>("SeanceId")
                        .HasColumnType("int")
                        .HasColumnName("Seance_ID");

                    b.HasKey("Id")
                        .HasName("PK__Tickets__3214EC2788C79FB0");

                    b.HasIndex("OrderId");

                    b.HasIndex("SeanceId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("CinemaDB.Models.Worker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CinemaId")
                        .HasColumnType("int")
                        .HasColumnName("Cinema_ID");

                    b.Property<int>("Passport")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("PositionId")
                        .HasColumnType("int")
                        .HasColumnName("Position_ID");

                    b.Property<int>("Salary")
                        .HasColumnType("int");

                    b.Property<string>("WName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("W_Name")
                        .HasDefaultValueSql("('NONAME')");

                    b.Property<string>("WSurname")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("W_Surname")
                        .HasDefaultValueSql("('NONAME')");

                    b.HasKey("Id")
                        .HasName("PK__Workers__3214EC2785CA80B0");

                    b.HasIndex("CinemaId");

                    b.HasIndex("PositionId");

                    b.HasIndex(new[] { "Passport" }, "UQ__Workers__208C1D4DC02DEDCB")
                        .IsUnique();

                    b.HasIndex(new[] { "Phone" }, "UQ__Workers__5C7E359E2FA70C8B")
                        .IsUnique()
                        .HasFilter("[Phone] IS NOT NULL");

                    b.ToTable("Workers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CinemaId = 2,
                            Passport = 77777,
                            Phone = "(099) 111-11-11",
                            PositionId = 2,
                            Salary = 30000,
                            WName = "Семен",
                            WSurname = "Персунов"
                        },
                        new
                        {
                            Id = 2,
                            CinemaId = 2,
                            Passport = 55555,
                            Phone = "(060) 345-97-34",
                            PositionId = 1,
                            Salary = 100000,
                            WName = "Ольга",
                            WSurname = "Дімітрео"
                        },
                        new
                        {
                            Id = 3,
                            CinemaId = 2,
                            Passport = 66666,
                            Phone = "(099) 111-22-33",
                            PositionId = 3,
                            Salary = 28000,
                            WName = "Аліса",
                            WSurname = "Двачевська"
                        });
                });

            modelBuilder.Entity("CinemaDB.Models.Order", b =>
                {
                    b.HasOne("CinemaDB.Models.Client", "Client")
                        .WithMany("Orders")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Orders__Client_I__4E88ABD4");

                    b.HasOne("CinemaDB.Models.Worker", "Worker")
                        .WithMany("Orders")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Orders__Worker_I__4F7CD00D");

                    b.Navigation("Client");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("CinemaDB.Models.Seance", b =>
                {
                    b.HasOne("CinemaDB.Models.Film", "Film")
                        .WithMany("Seances")
                        .HasForeignKey("FilmId")
                        .HasConstraintName("FK__Seances__Film_ID__60A75C0F");

                    b.HasOne("CinemaDB.Models.Hall", "HallNumNavigation")
                        .WithMany("Seances")
                        .HasForeignKey("HallNum")
                        .HasConstraintName("FK__Seances__Hall_Nu__619B8048");

                    b.Navigation("Film");

                    b.Navigation("HallNumNavigation");
                });

            modelBuilder.Entity("CinemaDB.Models.Ticket", b =>
                {
                    b.HasOne("CinemaDB.Models.Order", "Order")
                        .WithMany("TicketsNavigation")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Tickets__Order_I__6477ECF3");

                    b.HasOne("CinemaDB.Models.Seance", "Seance")
                        .WithMany("Tickets")
                        .HasForeignKey("SeanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Tickets__Seance___656C112C");

                    b.Navigation("Order");

                    b.Navigation("Seance");
                });

            modelBuilder.Entity("CinemaDB.Models.Worker", b =>
                {
                    b.HasOne("CinemaDB.Models.Cinema", "Cinema")
                        .WithMany("WorkersNavigation")
                        .HasForeignKey("CinemaId")
                        .HasConstraintName("FK__Workers__Cinema___4316F928");

                    b.HasOne("CinemaDB.Models.Position", "Position")
                        .WithMany("Workers")
                        .HasForeignKey("PositionId")
                        .HasConstraintName("FK__Workers__Positio__45F365D3");

                    b.Navigation("Cinema");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("CinemaDB.Models.Cinema", b =>
                {
                    b.Navigation("WorkersNavigation");
                });

            modelBuilder.Entity("CinemaDB.Models.Client", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("CinemaDB.Models.Film", b =>
                {
                    b.Navigation("Seances");
                });

            modelBuilder.Entity("CinemaDB.Models.Hall", b =>
                {
                    b.Navigation("Seances");
                });

            modelBuilder.Entity("CinemaDB.Models.Order", b =>
                {
                    b.Navigation("TicketsNavigation");
                });

            modelBuilder.Entity("CinemaDB.Models.Position", b =>
                {
                    b.Navigation("Workers");
                });

            modelBuilder.Entity("CinemaDB.Models.Seance", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("CinemaDB.Models.Worker", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
